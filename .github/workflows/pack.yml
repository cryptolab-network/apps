# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push but only for the main branch
  push:
    branches: [ staging ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Use environment variables from Environments in setting page
    environment: staging

    # Set env
    env: 
        REACT_APP_API_VERSION: ${{ secrets.REACT_APP_API_VERSION }}
        REACT_APP_GA_TRACKING_ID: ${{ secrets.REACT_APP_GA_TRACKING_ID }}
        REACT_APP_KUSAMA_WSS: ${{ secrets.REACT_APP_KUSAMA_WSS }}
        REACT_APP_POLKADOT_WSS: ${{ secrets.REACT_APP_POLKADOT_WSS }}
        REACT_APP_PROXY_TARGET: ${{ secrets.REACT_APP_PROXY_TARGET }}
        REACT_APP_TOOL_DOMAIN: ${{ secrets.REACT_APP_TOOL_DOMAIN }}

    strategy:
      matrix:
        node-version: [16.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      # Runs a single command using the runners shell
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build --if-present
        
      # Setup AWS config
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Upload artifacts to S3 with AWS CLI
        run: |
          aws s3 sync ./build s3://${{ secrets.S3_BUCKET }} --delete --exact-timestamps
     # Trigger code deploy 
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name cryptolab-staging \
            --deployment-group-name apps-group \
            --file-exists-behavior OVERWRITE \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
  # deploy:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v2
  #     # Download artifact
  #     #- name: Download artifact
  #     #  uses: actions/download-artifact@v2
  #     #  with:
  #     #    name: dist-without-markdown
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-central-1
  #     - name: Upload artifacts to S3 with AWS CLI
  #       run: |
  #         aws s3 sync ./dist-without-markdown s3://${{ secrets.S3_BUCKET }} --delete
  #    # Trigger code deploy 
  #     - name: Create CodeDeploy Deployment
  #       id: deploy
  #       run: |
  #         aws deploy create-deployment \
  #           --application-name cryptolab-backend \
  #           --deployment-group-name backend-group \
  #           --deployment-config-name CodeDeployDefault.OneAtATime \
  #           --github-location repository=${{ github.repository }},commitId=${{ github.sha }}

